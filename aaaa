go get github.com/360EntSecGroup-Skylar/excelize

package main

import (
	"github.com/aws/aws-sdk-go/aws/session"
	"github.com/aws/aws-sdk-go/aws"
	"github.com/aws/aws-sdk-go/service/ec2"
	"fmt"
	"regexp"
	"strings"
	"github.com/360EntSecGroup-Skylar/excelize"
)

func main() {
	getinstancedetails()
}

func check(e error) {

	if e != nil {
		panic(e)
	}
}

func getinstancedetails() {

	//name := "*test*"     // search string (NameTag)

	session := session.Must(session.NewSession(&aws.Config{
		Region: aws.String("eu-west-1"),
	}))
	svc := ec2.New(session)
	// Only grab instances that are running or just started

	result, err := svc.DescribeInstances(nil)
	if err != nil {
		fmt.Println("Error", err)
	} else {

		xlsx := excelize.NewFile()
		// Create a new sheet.
		index := xlsx.NewSheet("Ec2InstancesDetails")

		xlsx.SetCellValue("Ec2InstancesDetails", "A1", "Environment")
		xlsx.SetCellValue("Ec2InstancesDetails", "B1", "Instance Name")
		xlsx.SetCellValue("Ec2InstancesDetails", "C1", "Instance Type")
		//fmt.Println("Success", result)

		counter := 0

		for _, e := range result.Reservations {
			for _, instance := range e.Instances {

				fmt.Println("Value of a[%d] ", counter)
				var nt string
				for _, t := range instance.Tags {
					if *t.Key == "Name" {
						nt = *t.Value
						break
					}
				}

				re := regexp.MustCompile("(dev|tst|pre|pro).?")

				//fmt.Printf("%q\n", re.FindString(nt))
				env := re.FindString(nt)

				var environmentName string

				if len(strings.TrimSpace(env)) > 0 {
					environmentName = strings.ToUpper(env)
				}else {
					environmentName = strings.ToUpper("no env")
				}

					//fmt.Println("no env",  nt, *instance.InstanceType)
					xlsx.SetCellValue("Ec2InstancesDetails", fmt.Sprint("A" ,counter + 2), environmentName)
					xlsx.SetCellValue("Ec2InstancesDetails", fmt.Sprint("B" ,counter + 2), nt)
					xlsx.SetCellValue("Ec2InstancesDetails", fmt.Sprint("C" ,counter + 2), *instance.InstanceType)
					// Set active sheet of the workbook.
					xlsx.SetActiveSheet(index)

				counter ++
			}
		}

		// Save xlsx file by the given path.
		err := xlsx.SaveAs("./Workbook.xlsx")
		if err != nil {
			fmt.Println(err)
		}
	}

}
